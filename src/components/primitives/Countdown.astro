---
interface Props {
    eventDate: string;
    className?: string;
}

const { eventDate = "2025-09-17T09:00:00", className = "" } = Astro.props;
---

<div
    data-countdown
    data-event-date={eventDate}
    id="countdown-timer"
    class={`flex flex-wrap justify-center gap-4 my-8 opacity-100 transition-all duration-800 ${className}`}
>
    <div class="countdown-item bg-white p-4 rounded-lg shadow-md border-b-4 border-[#1A7A64] min-w-[90px] md:min-w-[100px]">
        <div id="days" class="text-3xl md:text-4xl font-bold text-[#1A7A64]">00</div>
        <div class="text-xs md:text-sm uppercase text-[#2C3E50] font-medium mt-1">Days</div>
    </div>
    <div class="countdown-item bg-white p-4 rounded-lg shadow-md border-b-4 border-[#0D3B66] min-w-[90px] md:min-w-[100px]">
        <div id="hours" class="text-3xl md:text-4xl font-bold text-[#0D3B66]">00</div>
        <div class="text-xs md:text-sm uppercase text-[#2C3E50] font-medium mt-1">Hours</div>
    </div>
    <div class="countdown-item bg-white p-4 rounded-lg shadow-md border-b-4 border-[#4ECDC4] min-w-[90px] md:min-w-[100px]">
        <div id="minutes" class="text-3xl md:text-4xl font-bold text-[#4ECDC4]">00</div>
        <div class="text-xs md:text-sm uppercase text-[#2C3E50] font-medium mt-1">Minutes</div>
    </div>
    <div class="countdown-item bg-white p-4 rounded-lg shadow-md border-b-4 border-[#FF9F1C] min-w-[90px] md:min-w-[100px]">
        <div id="seconds" class="text-3xl md:text-4xl font-bold text-[#FF9F1C]">00</div>
        <div class="text-xs md:text-sm uppercase text-[#2C3E50] font-medium mt-1">Seconds</div>
    </div>
</div>

<style>
    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
    }

    .countdown-item {
        transition: all 0.3s ease;
    }

    .countdown-item:hover {
        transform: translateY(-5px);
    }

    #seconds.pulse {
        animation: pulse 1s infinite;
    }

    /* Removed the hidden state that was causing issues */
</style>

<script>
    // Countdown timer function
    function updateCountdown() {
        const countdownElement = document.getElementById('countdown-timer');
        if (!countdownElement) return;

        const eventDateStr = countdownElement.getAttribute('data-event-date');
        if (!eventDateStr) return;

        const eventDate = new Date(eventDateStr).getTime();
        const now = new Date().getTime();
        const timeLeft = eventDate - now;

        // If the date has passed
        if (timeLeft < 0) {
            document.getElementById('days').innerText = '00';
            document.getElementById('hours').innerText = '00';
            document.getElementById('minutes').innerText = '00';
            document.getElementById('seconds').innerText = '00';
            return;
        }

        // Calculate time components
        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

        // Update the countdown
        document.getElementById('days').innerText = days.toString().padStart(2, '0');
        document.getElementById('hours').innerText = hours.toString().padStart(2, '0');
        document.getElementById('minutes').innerText = minutes.toString().padStart(2, '0');
        document.getElementById('seconds').innerText = seconds.toString().padStart(2, '0');

        // Add pulse animation to seconds
        const secondsElement = document.getElementById('seconds');
        if (secondsElement) {
            secondsElement.classList.add('pulse');
            setTimeout(() => {
                secondsElement.classList.remove('pulse');
            }, 500);
        }
    }

    // Initialize and run the countdown
    function initCountdown() {
        // Initialize countdown
        updateCountdown();

        // Update countdown every second
        setInterval(updateCountdown, 1000);
    }

    // Run on both initial and subsequent page loads
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initCountdown);
    } else {
        initCountdown();
    }

    // Handle cases where the component is dynamically added to the page
    document.addEventListener('astro:page-load', initCountdown);
    document.addEventListener('astro:after-swap', initCountdown);
</script>
