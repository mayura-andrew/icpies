---
interface DateItem {
  event: string;
  date: string;
  isPassed?: boolean;
  isHighlighted?: boolean;
  isCurrent?: boolean;
  icon?: string;
  eventType?: string;
}

interface Props {
  title: string;
  subtitle?: string;
  dates: DateItem[];
}

const { title, subtitle, dates } = Astro.props;

// Helper to check if a date has passed
const isDatePassed = (dateStr: string) => {
  const today = new Date();
  const itemDate = new Date(dateStr);
  return today > itemDate;
};

// Process dates and add status
const processedDates = dates.map(date => ({
  ...date,
  isPassed: date.isPassed !== undefined ? date.isPassed : isDatePassed(date.date)
}));
// Sort dates chronologically
const sortedDates = [...processedDates].sort((a, b) => {
  return new Date(a.date).getTime() - new Date(b.date).getTime();
});

// Format date for display (10th March 2025 format)
const formatDateWithSuffix = (dateStr: string) => {
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return dateStr;

    const day = date.getDate();
    const suffix =
      day % 10 === 1 && day !== 11 ? 'st' :
      day % 10 === 2 && day !== 12 ? 'nd' :
      day % 10 === 3 && day !== 13 ? 'rd' : 'th';

    return date.toLocaleDateString('en-US', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    }).replace(/\d+/, day + suffix);
  } catch (e) {
    console.error("Error formatting date:", e);
    return dateStr;
  }
};

// Find current event index
const findCurrentEventIndex = () => {
  // First check if any event is explicitly marked as current
  const explicitCurrent = sortedDates.findIndex(date => date.isCurrent === true);
  if (explicitCurrent >= 0) return explicitCurrent;

  // Check for March 15 event
  const march15Event = sortedDates.findIndex(date => {
    const eventDate = new Date(date.date);
    return eventDate.getMonth() === 2 && eventDate.getDate() === 15; // Month is 0-indexed, 2 = March
  });
  if (march15Event >= 0) return march15Event;

  // Otherwise, use date-based logic
  const today = new Date().getTime();
  for (let i = 0; i < sortedDates.length; i++) {
    if (new Date(sortedDates[i].date).getTime() > today) {
      return i;
    }
  }
  return -1;
};


const currentEventIndex = findCurrentEventIndex();
---

<section class="important-dates-section pt-16 pb-10 px-4 sm:px-6 lg:px-8relative" id="important-dates">
  <div class="max-w-6xl mx-auto">
    <!-- Section header -->
    <div class="text-center mb-10">
      <h2 class="text-[2.50rem] md:text-4xl font-bold text-gray-800 mb-3">{title}</h2>
      {subtitle &&
        <p class="text-base text-gray-600 max-w-3xl mx-auto">
          {subtitle}
        </p>
      }
    </div>

    {/* Desktop Timeline - with alternating cards and arrows */}
    <div class="hidden lg:block relative px-4 mb-12">
      {/* Main timeline line */}
      <div class="absolute left-0 right-0 top-28 h-2 bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 rounded-full shadow-sm"></div>

      <div class="flex justify-between relative min-h-[250px]">
        {sortedDates.map((dateItem, index) => {
          const isPassed = dateItem.isPassed;
          const isCurrent = index === currentEventIndex || dateItem.isCurrent;
          const isHighlighted = dateItem.isHighlighted;
          const isEven = index % 2 === 0;

          // Calculate colors based on status
          const nodeColor = isPassed
            ? 'bg-[#1A7A64]'
            : isCurrent
              ? 'bg-[#FF9F1C]'
              : isHighlighted
                ? 'bg-emerald-500'
                : 'bg-gray-300';

          const textColor = isPassed
            ? 'text-[#1A7A64]'
            : isCurrent
              ? 'text-[#FF9F1C]'
              : isHighlighted
                ? 'text-emerald-500'
                : 'text-gray-500';

          const ringColor = isPassed
            ? 'ring-[#1A7A64]/20'
            : isCurrent
              ? 'ring-[#FF9F1C]/20'
              : isHighlighted
                ? 'ring-emerald-500/20'
                : 'ring-gray-200';

          return (
            <div class="relative" style={`flex-basis: ${100/sortedDates.length}%; max-width: ${100/sortedDates.length}%`}>
              {/* Timeline node */}
              <div class={`absolute left-1/2 top-28 -translate-x-1/2 -translate-y-1/2 w-5 h-5 rounded-full ${nodeColor} ring-4 ${ringColor} shadow-md z-10 ${isCurrent ? 'animate-pulse' : ''}`}></div>

              {/* Card wrapper with arrow connector */}
              <div class={`absolute ${isEven ? '-top-2' : 'top-40'} left-1/2 -translate-x-1/2 w-40`}>
                {/* Arrow connecting to timeline */}
                <div class={`absolute left-1/2 -translate-x-1/2 ${isEven ? 'bottom-0 top-[calc(100%+4px)]' : 'bottom-[calc(100%+4px)]'} w-px h-8 ${nodeColor}`}></div>
                <div class={`absolute left-1/2 -translate-x-1/2 transform -translate-y-[1px] ${isEven ? 'top-[calc(100%+11px)]' : 'bottom-[calc(100%+3px)]'} w-0 h-0 border-solid ${
                  isEven
                    ? 'border-t-0 border-b-[6px] border-l-[6px] border-r-[6px] border-b-' + nodeColor.replace('bg-', '') + ' border-l-transparent border-r-transparent'
                    : 'border-b-0 border-t-[6px] border-l-[6px] border-r-[6px] border-t-' + nodeColor.replace('bg-', '') + ' border-l-transparent border-r-transparent'
                }`}></div>

                {/* Date card */}
                <div class={`bg-white p-3 rounded-lg shadow-md border-l-4 ${
                  isPassed ? 'border-[#1A7A64]' : isCurrent ? 'border-[#FF9F1C]' : isHighlighted ? 'border-emerald-500' : 'border-gray-300'
                } transition-transform duration-300 hover:scale-105`}>
                  <p class={`text-xs font-bold mb-1 ${textColor}`}>
                    {formatDateWithSuffix(dateItem.date)}
                  </p>
                  <p class="text-sm font-semibold text-gray-800">{dateItem.event}</p>

                  {/* Status indicator */}
                  <div class={`mt-2 inline-block px-2 py-0.5 text-[10px] font-medium rounded-full ${
                    isPassed
                      ? 'bg-[#1A7A64]/10 text-[#1A7A64]'
                      : isCurrent
                        ? 'bg-[#FF9F1C]/20 text-[#FF9F1C]'
                        : 'bg-gray-100 text-gray-500'
                  }`}>
                    {isPassed ? 'Completed' : isCurrent ? 'Current' : 'Upcoming'}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>

    {/* Tablet Timeline - Simplified */}
    <div class="hidden md:block lg:hidden relative px-4 mb-10">
      <div class="absolute left-0 right-0 top-20 h-1.5 bg-gray-200 rounded-full"></div>
      <div class="flex justify-between relative min-h-[180px] pb-10">
        {sortedDates.map((dateItem, index) => {
          const isPassed = dateItem.isPassed;
          const isCurrent = index === currentEventIndex || dateItem.isCurrent;
          const isHighlighted = dateItem.isHighlighted;
          const isEven = index % 2 === 0;

          return (
            <div class="relative" style={`flex-basis: ${100/sortedDates.length}%; max-width: ${100/sortedDates.length}%`}>
              <div class={`absolute left-1/2 top-[5rem] -translate-x-1/2 w-4 h-4 rounded-full ${
                isPassed
                  ? 'bg-[#1A7A64]'
                  : isCurrent
                    ? 'bg-[#FF9F1C] ring-4 ring-[#FF9F1C]/20'
                    : isHighlighted
                      ? 'bg-emerald-500 ring-4 ring-emerald-500/20'
                      : 'bg-gray-300'
              }`}></div>

              <div class={`absolute w-36 text-center ${
                isEven ? '-top-20' : 'top-28'
              } left-1/2 -translate-x-1/2 transition-all duration-300`}>
                <p class={`text-xs font-medium mb-1 ${
                  isPassed
                    ? 'text-[#1A7A64]'
                    : isCurrent
                      ? 'text-[#FF9F1C]'
                      : isHighlighted
                        ? 'text-emerald-500'
                        : 'text-gray-500'
                }`}>
                  {formatDateWithSuffix(dateItem.date)}
                </p>
                <p class="text-sm font-medium text-gray-800">{dateItem.event}</p>
              </div>
            </div>
          );
        })}
      </div>
    </div>

    {/* Mobile View - Vertical Timeline */}
    <div class="md:hidden mb-8">
      <div class="relative pl-10 pb-2">
        {/* Vertical timeline line */}
        <div class="absolute left-4 top-0 bottom-0 w-1 bg-gradient-to-b from-emerald-500/50 to-gray-200 rounded-full"></div>

        <div class="space-y-8">
          {sortedDates.map((dateItem, index) => {
            const isPassed = dateItem.isPassed;
            const isCurrent = index === currentEventIndex || dateItem.isCurrent;
            const isHighlighted = dateItem.isHighlighted;

            return (
              <div class="relative">
                {/* Node on vertical line */}
                <div class={`absolute -left-6 top-1 w-4 h-4 rounded-full z-10 ${
                  isPassed
                    ? 'bg-[#1A7A64]'
                    : isCurrent
                      ? 'bg-[#FF9F1C] ring-2 ring-[#FF9F1C]/20'
                      : isHighlighted
                        ? 'bg-emerald-500 ring-2 ring-emerald-500/20'
                        : 'bg-gray-300'
                } ${isCurrent ? 'animate-pulse' : ''}`}></div>

                {/* Connector line */}
                <div class={`absolute -left-2 top-3 w-5 h-0.5 ${
                  isPassed
                    ? 'bg-[#1A7A64]'
                    : isCurrent
                      ? 'bg-[#FF9F1C]'
                      : isHighlighted
                        ? 'bg-emerald-500'
                        : 'bg-gray-300'
                }`}></div>

                {/* Event card */}
                <div class={`pl-4 pb-2 border-l-2 ${
                  isPassed
                    ? 'border-[#1A7A64] text-[#1A7A64]'
                    : isCurrent
                      ? 'border-[#FF9F1C] text-[#FF9F1C]'
                      : isHighlighted
                        ? 'border-emerald-500 text-emerald-500'
                        : 'border-gray-300 text-gray-500'
                }`}>
                  <p class="text-xs font-semibold">
                    {formatDateWithSuffix(dateItem.date)}
                  </p>
                  <h3 class="text-base font-semibold text-gray-800 mt-1">
                    {dateItem.event}
                  </h3>

                  {/* Status tag */}
                  <div class={`mt-1 inline-block px-2 py-0.5 text-xs font-medium rounded-full ${
                    isPassed
                      ? 'bg-[#1A7A64]/10 text-[#1A7A64]'
                      : isCurrent
                        ? 'bg-[#FF9F1C]/20 text-[#FF9F1C]'
                        : isHighlighted
                          ? 'bg-emerald-500/20 text-emerald-500'
                          : 'bg-gray-100 text-gray-500'
                  }`}>
                    {isPassed ? 'Completed' : isCurrent ? 'Active' : 'Upcoming'}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes pulse {
    0%, 100% {
      box-shadow: 0 0 0 0 rgba(255, 159, 28, 0.4);
    }
    50% {
      box-shadow: 0 0 0 8px rgba(255, 159, 28, 0);
    }
  }

  .animate-pulse {
    animation: pulse 2s infinite;
  }

  /* Hide scrollbar but keep functionality */
  .hide-scrollbar {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }

  .hide-scrollbar::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }

  /* Timeline container positioning */
  .important-dates-section {
    position: relative;
    overflow-x: hidden;
  }
</style>
