---
import TrackImage from "./TrackImage.astro";

interface Props {
  track: any;
}

const { track } = Astro.props;
const { data, slug } = track;
---

<a href={`/tracks/${slug}`} class="block hover:transform hover:scale-105 transition-all duration-300">
  <div class="rounded-lg overflow-hidden shadow-lg h-full flex flex-col bg-white">
    <div class="relative h-48 overflow-hidden">
      {data.cover && (
        <TrackImage
          src={data.cover}
          alt={data.title}
          class="w-full h-full object-cover"
          width={400}
          height={200}
        />
      )}
      <div class="absolute top-0 right-0 p-2 bg-slate-800 text-white rounded-bl-lg">
        <i class={`fas fa-${data.icon}`}></i>
      </div>
    </div>

    <div class="p-6 flex-1 flex flex-col">
      <h2 class="text-xl font-bold mb-2" style={data.color ? `color: ${data.color}` : ''}>
        {data.title}
      </h2>

      {data.subtitle && (
        <p class="text-slate-500 mb-4 text-sm">{data.subtitle}</p>
      )}

      <p class="text-slate-700 mb-4 flex-1">{data.description}</p>

      <div class="flex flex-wrap gap-2 mt-auto">
        {data.topics?.slice(0, 3).map((topic: string) => (
          <span class="inline-block bg-slate-100 px-3 py-1 rounded-full text-xs font-medium text-slate-800">
            {topic}
          </span>
        ))}
        {data.topics?.length > 3 && (
          <span class="inline-block bg-slate-100 px-3 py-1 rounded-full text-xs font-medium text-slate-800">
            +{data.topics.length - 3} more
          </span>
        )}
      </div>
    </div>
  </div>
</a>
